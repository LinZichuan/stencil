#include <iostream>
#include <stdio.h>
#include <sys/time.h>
#include <vector>
#include <cstdlib>
using namespace std;

double* Aproduct(double *A, double *x, int nx, int ny, int nz) {
    int size = nx * ny * nz;
    int slice = ny * nz;
    double *Ax = new double[size];
    for (int i = 0; i < nx; ++i) {
        for (int j = 0; j < ny; ++j) {
            for (int k = 0; k < nz; ++k) {
                int idx = i*slice + j*nz + k;
                //int a1 = idx-slice;
                //int a2 = idx+slice;
                //int a3 = idx-nz;
                //int a4 = idx+nz;
                //int a5 = idx+slice+nz;
                //int a6 = idx+slice-nz;
                //int a7 = idx-slice-nz;
                //int a8 = idx-slice+nz;
                //int a9 = idx-1;
                //int a10 = idx-slice-1;
                //int a11 = idx+slice-1;
                //int a12 = idx-nz-1;
                //int a13 = idx+nz-1;
                //int a14 = idx+1;
                //int a15 = idx-slice+1;
                //int a16 = idx+slice+1;
                //int a17 = idx-nz+1;
                //int a18 = idx+nz+1;
#define BACK(idx, N) (idx-1+N)%N
#define FORW(idx, N) (idx+1)%N
                int a0  = idx;
                //i-1,j,k
                int a1  = BACK(i,nx)*slice + j*nz + k;
                //i+1,j,k
                int a2  = FORW(i,nx)*slice + j*nz + k;
                //i,j-1,k
                int a3  = i*slice + (j-1)*nz + k;
                if (j == 0) a3 = (i+nx/2)%nx*slice + j*nz + k;
                //i,j+1,k
                int a4  = i*slice + (j+1)*nz + k;
                if (j == ny-1) a4 = (i+nx/2)%nx*slice + j*nz + k;
                //i+1,j+1,k
                int a5  = FORW(i,nx)*slice + (j+1)*nz + k;
                if (j == ny-1) a5 = (FORW(i,nx)+nx/2)%nx*slice + j*nz + k;
                //i+1,j-1,k
                int a6  = FORW(i,nx)*slice + (j-1)*nz + k;
                if (j == 0) a6 = (FORW(i,nx)+nx/2)%nx*slice + j*nz + k;
                //i-1,j-1,k
                int a7  = BACK(i,nx)*slice + (j-1)*nz + k;
                if (j == 0) a7 = (BACK(i,nx)+nx/2)%nx*slice + j*nz + k;
                //i-1,j+1,k
                int a8  = BACK(i,nx)*slice + (j+1)*nz + k;
                if (j == ny-1) a8 = (BACK(i,nx)+nx/2)%nx*slice + j*nz + k;
                //i,j,k-1
                int a9  = i*slice + j*nz + BACK(k,nz);
                //i-1,j,k-1
                int a10 = BACK(i,nx)*slice + j*nz + BACK(k,nz);
                //i+1,j,k-1
                int a11 = FORW(i,nx)*slice + j*nz + BACK(k,nz);
                //i,j-1,k-1
                int a12 = i*slice + (j-1)*nz + BACK(k,nz);
                if (j == 0) a12 = (i+nx/2)%nx*slice + j*nz + BACK(k,nz);
                //i,j+1,k-1
                int a13 = i*slice + (j+1)*nz + BACK(k,nz);
                if (j == ny-1) a13 = (i+nx/2)%nx*slice + j*nz + BACK(k,nz);
                //i,j,k+1
                int a14 = i*slice + j*nz + FORW(k,nz);
                //i-1,j,k+1
                int a15 = BACK(i,nx)*slice + j*nz + FORW(k,nz);
                //i+1,j,k+1
                int a16 = FORW(i,nx)*slice + j*nz + FORW(k,nz);
                //i,j-1,k+1
                int a17 = i*slice + (j-1)*nz + FORW(k,nz);
                if (j == 0) a17 = (i+nx/2)%nx*slice + j*nz + FORW(k,nz);
                //i,j+1,k+1
                int a18 = i*slice + (j+1)*nz + FORW(k,nz);
                if (j == ny-1) a18 = (i+nx/2)%nx*slice + j*nz + FORW(k,nz);
                Ax[idx] = A[idx]*x[idx] 
                        + A[idx+1]*x[a1] 
                        + A[idx+2]*x[a2] 
                        + A[idx+3]*x[a3]
                        + A[idx+4]*x[a4]
                        + A[idx+5]*x[a5]
                        + A[idx+6]*x[a6]
                        + A[idx+7]*x[a7]
                        + A[idx+8]*x[a8]
                        + A[idx+9]*x[a9]
                        + A[idx+10]*x[a10]
                        + A[idx+11]*x[a11]
                        + A[idx+12]*x[a12]
                        + A[idx+13]*x[a13]
                        + A[idx+14]*x[a14]
                        + A[idx+15]*x[a15]
                        + A[idx+16]*x[a16]
                        + A[idx+17]*x[a17]
                        + A[idx+18]*x[a18];
                //Ax[idx] = A[idx]*x[idx] 
                //        + A[idx+1]*x[idx-slice] 
                //        + A[idx+2]*x[idx+slice] 
                //        + A[idx+3]*x[idx-nz]
                //        + A[idx+4]*x[idx+nz]
                //        + A[idx+5]*x[idx+slice+nz]
                //        + A[idx+6]*x[idx+slice-nz]
                //        + A[idx+7]*x[idx-slice-nz]
                //        + A[idx+8]*x[idx-slice+nz]
                //        + A[idx+9]*x[idx-1]
                //        + A[idx+10]*x[idx-slice-1]
                //        + A[idx+11]*x[idx+slice-1]
                //        + A[idx+12]*x[idx-nz-1]
                //        + A[idx+13]*x[idx+nz-1]
                //        + A[idx+14]*x[idx+1]
                //        + A[idx+15]*x[idx-slice+1]
                //        + A[idx+16]*x[idx+slice+1]
                //        + A[idx+17]*x[idx-nz+1]
                //        + A[idx+18]*x[idx+nz+1];
                //R[idx] = b[idx] - Ax[idx];
            }
        }
    }
    return Ax;
}
double* Matrixminus(double *b, double *Ax, int nx, int ny, int nz) {
    int size = nx * ny * nz;
    double *R = new double[size];
    for (int idx = 0; idx < size; ++idx) {
        R[idx] = b[idx] - Ax[idx];
    }
    return R;
}
double dotproduct(double *a, double *b, int n) {
    double res = 0.0;
    for (int i = 0; i < n; ++i) {
        res += a[i] * b[i];
    }
    return res;
}
void saxpy(double *x, double *p, double alpha, int n) {
    for (int i = 0; i < n; ++i) {
        x[i] = x[i] + alpha*p[i];
    }
}
double* add(double *a, double *b, int n) {
    double *res = new double[n];
    for (int i = 0; i < n; ++i) {
        res[i] = a[i] + b[i];
    }
    return res;
}
double* sigma(double *beta, vector<double*> &vec, int jbegin, int i, int size) {
    double *res = new double[size];
    for (int t = 0; t < size; ++t) {
        res[t] = 0.0;
    }
    for (int j = jbegin; j < i; ++j) {
        for (int t = 0; t < size; ++t) {
            res[t] += beta[j] * vec[j][t];
        }
    }
    return res;
}
//Ap = add(AR_, sigma(beta, vecAp, jbegin, i));
int main() {
    FILE *fp, *fpb, *fpx;;
    string binfile = "case_360x180x38/A.bin";
    string binfileb = "case_360x180x38/b.bin";
    string binfilex = "case_360x180x38/x0.bin";
    if ((fp = fopen(binfile.c_str(), "rb")) == NULL) {
        cout << "cannot open A.bin" << endl;
        return 0;
    }
    if ((fpb = fopen(binfileb.c_str(), "rb")) == NULL) {
        cout << "cannot open b.bin" << endl;
        return 0;
    }
    if ((fpx = fopen(binfilex.c_str(), "rb")) == NULL) {
        cout << "cannot open x0.bin" << endl;
        return 0;
    }
    int nx=360, ny=180, nz=38;
    int slice = ny*nz;
    int size = 360*180*38;
    double *A = new double[size*19];
    double *b = new double[size];
    double *x = new double[size];
    if (fread(A, sizeof(double), size*19, fp) != size*19) {
        cout << "file A.bin read error" << endl;
        return 0;
    }
    if (fread(b, sizeof(double), size, fpb) != size) {
        cout << "file b.bin read error" << endl;
        return 0;
    }
    if (fread(x, sizeof(double), size, fpx) != size) {
        cout << "file x0.bin read error" << endl;
        return 0;
    }
    //cout.precision(27);
    //for (int i = 0; i < size; ++i) {
    //    cout << A[i] << endl;
    //    cout << b[i] << endl;
    //    cout << x[i] << endl;
    //    break;
    //}
    fclose(fp);
    fclose(fpb);
    fclose(fpx);

    //double *Ax = new double[size];
    //double *R = new double[size];
    double *Ax = Aproduct(A, x, nx, ny, nz);
    double *R = Matrixminus(b, Ax, nx, ny, nz);
    double Rnorm2 = dotproduct(R, R, size);
    cout << Rnorm2 << endl; //1e-5
    double *R_ = new double[size];
    //double *Ap = new double[size];
    double *p0 = new double[size];
    for (int i = 0; i < size; ++i) {
        R_[i] = R[i]; //R_ = M^-1 * R //TODO
        p0[i] = R_[i]; //p = R_
    }
    /*
    vector<double*> vecAp;
    vector<double*> vecp;
    double *Ap0 = Aproduct(A, p0, nx, ny, nz);
    vecp.push_back(p0);
    vecAp.push_back(Ap0);
    int k = 5;
    for (int i = 1; i < 150; ++i) {
        double alpha = dotproduct(R, vecAp[i-1], size) / dotproduct(vecAp[i-1], vecAp[i-1], size);
        cout << i << endl;
        saxpy(x, vecp[i-1], alpha, size);  //x = x + alpha * p;
        saxpy(R, vecAp[i-1], -alpha, size);  //R = R - alpha * Ap;
        //TODO R_ = Aproduct(inv(M), R, nx, ny, nz);  //R_ = M^-1 * R;
        for (int t = 0; t < size; ++t) {
            R_[t] = R[t]; //R_ = M^-1 * R //TODO
        }
        int jbegin = int((i-1)/k)*k;
        double *beta = new double[i-jbegin];
        double *AR_ = Aproduct(A, R_, nx, ny, nz);
        for (int j = jbegin; j < i; ++j) {
            beta[j-jbegin] = - dotproduct(AR_, vecAp[j], size) / dotproduct(vecAp[j], vecAp[j], size);
        }
        double *p = add(R_, sigma(beta, vecp, jbegin, i, size), size);
        double *Ap = add(AR_, sigma(beta, vecAp, jbegin, i, size), size);
        vecp.push_back(p);
        vecAp.push_back(Ap);
    }
    */
    //Ax = Aproduct(A, x, nx, ny, nz);
    //double *diff = Matrixminus(Ax, b, nx, ny, nz);
    //double norm2 = dotproduct(diff, diff, size);
    //cout << norm2 << endl;

    return 0;

}
